From 4048562961c461c33ab7dfcb1bdd9066004a9a11 Mon Sep 17 00:00:00 2001
From: msizanoen1 <msizanoen@qtmlabs.xyz>
Date: Mon, 17 Apr 2023 17:51:58 +0700
Subject: [PATCH 1/2] stage: Keep queued actor redraw clip volumes separate

This aims to reduce the amount of pixels that have to be redrawed on the
screen on a clipped actor redraw in case using the union of two
different clips in a surface will substantially increase the redrawn
area.

This should not result in excessive memory consumption as callers of
`clutter_actor_queue_redraw_with_clip` are expected to ensure that the
redraw clip rectangles are adequately deduplicated.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2965>
---
 clutter/clutter/clutter-stage.c | 67 ++++++++++++++-------------------
 1 file changed, 28 insertions(+), 39 deletions(-)

diff --git a/clutter/clutter/clutter-stage.c b/clutter/clutter/clutter-stage.c
index 14774f6f0b0..4afb5b7054b 100644
--- a/clutter/clutter/clutter-stage.c
+++ b/clutter/clutter/clutter-stage.c
@@ -77,8 +77,7 @@
 
 typedef struct _QueueRedrawEntry
 {
-  gboolean has_clip;
-  ClutterPaintVolume clip;
+  GSList *clips;
 } QueueRedrawEntry;
 
 typedef struct _PickRecord
@@ -2542,52 +2541,39 @@ clutter_stage_queue_actor_redraw (ClutterStage             *stage,
 
   entry = g_hash_table_lookup (priv->pending_queue_redraws, actor);
 
-  if (entry)
+  if (!entry)
     {
-      /* Ignore all requests to queue a redraw for an actor if a full
-       * (non-clipped) redraw of the actor has already been queued. */
-      if (!entry->has_clip)
-        {
-          CLUTTER_NOTE (CLIPPING, "Bail from stage_queue_actor_redraw (%s): "
-                        "Unclipped redraw of actor already queued",
-                        _clutter_actor_get_debug_name (actor));
-          return;
-        }
-
-      /* If queuing a clipped redraw and a clipped redraw has
-       * previously been queued for this actor then combine the latest
-       * clip together with the existing clip */
-      if (clip)
-        clutter_paint_volume_union (&entry->clip, clip);
-      else
-        {
-          clutter_paint_volume_free (&entry->clip);
-          entry->has_clip = FALSE;
-        }
+      entry = g_new0 (QueueRedrawEntry, 1);
+      g_hash_table_insert (priv->pending_queue_redraws,
+                           g_object_ref (actor), entry);
     }
-  else
+  else if (!entry->clips)
     {
-      entry = g_new0 (QueueRedrawEntry, 1);
+      CLUTTER_NOTE (CLIPPING, "Bail from stage_queue_actor_redraw (%s): "
+                    "Unclipped redraw of actor already queued",
+                    _clutter_actor_get_debug_name (actor));
+      return;
+    }
 
-      if (clip)
-        {
-          entry->has_clip = TRUE;
-          _clutter_paint_volume_init_static (&entry->clip, actor);
-          _clutter_paint_volume_set_from_volume (&entry->clip, clip);
-        }
-      else
-        entry->has_clip = FALSE;
+  /* If queuing a clipped redraw then append the latest
+   * clip to the clip list */
+  if (clip)
+    {
+      ClutterPaintVolume *clip_pv = _clutter_paint_volume_new (actor);
 
-      g_hash_table_insert (priv->pending_queue_redraws,
-                           g_object_ref (actor), entry);
+      _clutter_paint_volume_set_from_volume (clip_pv, clip);
+      entry->clips = g_slist_prepend (entry->clips, clip_pv);
+    }
+  else
+    {
+      g_clear_slist (&entry->clips, (GDestroyNotify) clutter_paint_volume_free);
     }
 }
 
 static void
 free_queue_redraw_entry (QueueRedrawEntry *entry)
 {
-  if (entry->has_clip)
-    clutter_paint_volume_free (&entry->clip);
+  g_clear_slist (&entry->clips, (GDestroyNotify) clutter_paint_volume_free);
   g_free (entry);
 }
 
@@ -2682,9 +2668,12 @@ clutter_stage_maybe_finish_queue_redraws (ClutterStage *stage)
           _clutter_paint_volume_init_static (&old_actor_pv, NULL);
           _clutter_paint_volume_init_static (&new_actor_pv, NULL);
 
-          if (entry->has_clip)
+          if (entry->clips)
             {
-              add_to_stage_clip (stage, &entry->clip);
+              GSList *l;
+
+              for (l = entry->clips; l; l = l->next)
+                add_to_stage_clip (stage, l->data);
             }
           else if (clutter_actor_get_redraw_clip (redraw_actor,
                                                   &old_actor_pv,
-- 
GitLab


From 3f85158b85f66e003c5fecd3314bb178799f9b0c Mon Sep 17 00:00:00 2001
From: msizanoen1 <msizanoen@qtmlabs.xyz>
Date: Mon, 17 Apr 2023 18:27:18 +0700
Subject: [PATCH 2/2] surface-actor: Queue rectangles of update region
 separately

This aims to help reduce the amount of pixels redrawn on the screen in
case the damage rectangle is partially occluded by another surface.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2965>
---
 src/compositor/meta-surface-actor.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/compositor/meta-surface-actor.c b/src/compositor/meta-surface-actor.c
index fcd94b86d3a..1bc58667a86 100644
--- a/src/compositor/meta-surface-actor.c
+++ b/src/compositor/meta-surface-actor.c
@@ -412,10 +412,17 @@ meta_surface_actor_update_area (MetaSurfaceActor *self,
 
           if (!cairo_region_is_empty (intersection))
             {
-              cairo_rectangle_int_t damage_rect;
+              int i, n_rectangles;
+
+              n_rectangles = cairo_region_num_rectangles (intersection);
+              for (i = 0; i < n_rectangles; i++)
+                {
+                  cairo_rectangle_int_t rect;
+
+                  cairo_region_get_rectangle (intersection, i, &rect);
+                  clutter_actor_queue_redraw_with_clip (CLUTTER_ACTOR (self), &rect);
+                }
 
-              cairo_region_get_extents (intersection, &damage_rect);
-              clutter_actor_queue_redraw_with_clip (CLUTTER_ACTOR (self), &damage_rect);
               repaint_scheduled = TRUE;
             }
 
-- 
GitLab

